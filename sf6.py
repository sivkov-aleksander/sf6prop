# -*- coding: utf-8 -*-
"""
Набор функций для вычисления свойств элегаза.
[1] Аракелян В.Г. Физическая химия элегазового электротехнического оборудования
"""
import numpy as np
import matplotlib.pyplot as plt

# !!! Названия функций
# !!! Добавить проверку и тесты каждой функции!
# !!! Добавить распечатку результатов в __main__
# !!! Добавить функцию построения диаграммы состояния
# !!! Перенести код функций в класс
# !!! Добавить функции вычисления термодинамических параметров элегаза Сp, Cv, lambda
# !!! Добавить функции вычисления газодиинамических характеристик. Для расчетов на нагрев
# !!! Добавить функции вычисления температуры сжижения для заданной плотности

def calc_p_liq_gas(temp):
    """
    Вычисление давления насыщенного пара шестифтористой серы от тройной
    до критической точки.
    input:
        temp - температура от -50.8 до 45.56 градусов
    output:
        абсолютное давление в кПа
    """
    if temp > -50.8 and temp <= 45.56:
        rpart = 6.312993 - 863.385616 / (temp + 268.72) + \
                8.7339e-3 * np.exp(-10.26 * (45.56 - temp) / (temp + 50.8))
        return 10 ** rpart
    else:
        return -1

def calc_p_solid_gas(temp):
    """
    Вычисление давления пара над твердой шестифтористой серой
    input:
        temp - температура (ниже -50.8 градусов)
    output:
        абсолютное давление в кПа
    """
    if temp < -50.8:
        rpart = 7.850 - 1230 / (temp + 273.15) + \
                0.03288 * np.exp((temp + 50.8) / (temp + 290))
        return 10 ** rpart
    else:
        return -1
    
def calc_p_gas(temp):
    """
    Вычисление давления над жидкой фазой
    input:
        temp - температура до 45.56 градусов
    output:
        абсолютное давление в кПа
    """
    if temp > 45.56:
        return -1
    elif temp > -50.8:
        return calc_p_liq_gas(temp)
    else:
        return calc_p_solid_gas(temp)

def calc_p_z(temp, rho):
    """
    Вычисление давления элегаза в зависимости от плотности и температуры на
    основании уравнения с вириальными коэффициентами.
    Уравнение (1.4) из [1]
    input:
        temp - температура, К
        rho - плотность, кг/м3
    output:
        p - давление, МПа    
    """
    return 5.69267e-5 * temp * rho + 7.79428e-8 * temp * rho ** 2 - \
        4.9878e-5 * rho ** 2 - 0.4833 * rho ** 2 / temp ** 2
        
def calc_p_bb(temp, rho):
    """
    Вычисление давления элегаза в зависимости от плотности и температуры на
    основании уравнения Бетти-Бриджмена.
    Уравнение (1.5) из [1]
    input:
        temp - температура, К
        rho - плотность, кг/м3
    output:
        p - давление, МПа    
    """
    return 5.69267e-5 * temp * rho * (1 + 2.506e-3 * rho - 2.121e-6 * rho ** 2) - \
        7.3974e-5 * rho ** 2 - 5.3788e-8 * rho ** 3

def calc_rho_ar(temp, p):
    """
    Расчет плотности газообразного элегаза по эмпирическому уравнению (1.6)
    input:
        temp - температура, К
        p - давление, МПа
    output:
        rho - плотность, кг/м3
    """
    return 17600 / (temp / p - 10e-7 * (104.08 - 66 * p + 1.72e-2 * p ** -2 +
                                        60 * p ** 2) / temp ** 3)

def calc_rho_z(temp, p, eps=0.000001):
    """
    Расчет плотности газообразного элегаза по известным температуре и давлению.
    Решение по вириальному уравнению.
    input:
        temp - температура, К
        p - давление, МПА
        eps = 0.000001 - точность вычислений по давлению
    output:
        rho - плотность, кг/м3
    """    
    rho_l = 0
    rho_r = 100
    rho_n = (rho_l + rho_r) / 2
    
    p_n = calc_p_z(temp, rho_n)
    while abs(p_n - p) >= eps:
        if p_n > p:
            rho_r = rho_n
        else:
            rho_l = rho_n
        rho_n = (rho_l + rho_r) / 2
        p_n = calc_p_z(temp, rho_n)
        
    return rho_n

def calc_rho_bb(temp, p, eps = 0.000001):
    """
    Расчет плотности газообразного элегаза по известным температуре и давлению.
    Решение по уравнению Бетти-Бриджмена.
    input:
        temp - температура, К
        p - давление, МПА
        eps = 0.000001 - точность вычислений по давлению
    output:
        rho - плотность, кг/м3
    """    
    rho_l = 0
    rho_r = 100
    rho_n = (rho_l + rho_r) / 2
    
    p_n = calc_p_bb(temp, rho_n)
    while abs(p_n - p) >= eps:
        if p_n > p:
            rho_r = rho_n
        else:
            rho_l = rho_n
        rho_n = (rho_l + rho_r) / 2
        p_n = calc_p_bb(temp, rho_n)
        
    return rho_n

def calc_temp_z(p, rho, eps=0.000001):
    """
    Расчет температуры газообразного элегаза по известным плотности и
    давлению по уравнению c вириальными коэффициентами
    input:
        p - давление, МПа
        rho - плотнось, кг/м3
        eps = 0.000001 - точность вычислений по давлению
    output:
        temp - температура, К
    """
    temp_l = 273 - 100
    temp_r = 273 + 200
    temp_n = (temp_l + temp_r) / 2
    
    p_n = calc_p_z(temp_n, rho)
    while abs(p_n - p) >= eps:
        if p_n > p:
            temp_r = temp_n
        else:
            temp_l = temp_n
        temp_n = (temp_l + temp_r) / 2
        p_n = calc_p_z(temp_n, rho)

    return temp_n
    
def calc_temp_bb(p, rho):
    """
    Расчет температуры газообразного элегаза по известным плотности и
    давлению по уравнению Бетти-Бриджмена
    input:
        p - давление, МПа
        rho - плотнось, кг/м3
    output:
        temp - температура, К
    """
    rpart = 5.69267e-5 * rho * (1 + 2.506e-3 * rho - 2.121e-6 * rho ** 2) 
    return (p + 7.3974e-5 * rho ** 2 + 5.3788e-8 * rho ** 3) / rpart

def calc_temp_liq(rho, eps=0.00001):
    """
    Функция вычисления температуры сжижения элегаза по заданной плотности
    input:
        rho - плотность, кг/м3
        eps = 0.0001 - точность расчета по давлению (температуре?)
    output:
        temp - температура, при которой элегаз сжижается, К
    """
    #calc_p_gas(temp) # вычисление давления сжижения от температуры
    #calc_p_bb(temp, rho) # вычисление давления по температуре и плотности
    temp_l = 273 - 100
    temp_r = 273 + 45.56
    temp_n = (temp_l + temp_r) / 2
    p_n = 0.001 * calc_p_gas(temp_n - 273) - calc_p_bb(temp_n, rho)
    #n = 1
    while abs(p_n) >= eps:
        if p_n > 0:
            temp_r = temp_n
        else:
            temp_l = temp_n
        temp_n = (temp_l + temp_r) / 2
        p_n = 0.001 * calc_p_gas(temp_n - 273) - calc_p_bb(temp_n, rho)
        #n += 1
    #print(n)
    return temp_n

if __name__ == '__main__':
# Тестирование функций
#    print(calc_p_liq_gas(-50))
#    print(calc_p_solid_gas(-70))
#    print(calc_p_gas(-50))
#    print(calc_p_gas(-70))
#    print(calc_p_z(20 + 273, 20))
#    print(calc_p_bb(20 + 273, 20))
#    print(calc_rho_ar(20 + 273, 0.32))
#    print(calc_rho_z(20 + 273, 0.32))
#    print(calc_rho_bb(20 + 273, 0.32)) 
#    print(calc_temp_z(0.32000709380747916, 20, eps=0.1) - 273)
#    print(calc_temp_z(0.32000709380747916, 20, eps=0.01) - 273)
#    print(calc_temp_z(0.32000709380747916, 20, eps=0.001) - 273)
#    print(calc_temp_z(0.32000709380747916, 20, eps=0.0001) - 273)
#    print(calc_temp_z(0.32000709380747916, 20, eps=0.00001) - 273)
#    print(calc_temp_z(0.32000709380747916, 20, eps=0.000001) - 273)
#    print(calc_temp_z(0.32000709380747916, 20, eps=0.0000001) - 273)
#    print(calc_temp_bb(0.32000709380747916, 20) - 273)
#    print(calc_temp_liq(42, eps=0.00001) - 273)
#    print(calc_p_bb(273+(-29.419969177246088), 42))
    
    # Алгоритм работы
#    1. По температуре 20 градусов и номинальному давлению вычисляется 
#    плотность элегаза.
    p_nom = 0.38 # Номинальное давление, МПа
    rho_nom = calc_rho_bb(20 + 273, p_nom) # Номинальная плотность, кг/м3
    print("Номинальное давление: {0:3.3f}, МПа".format(p_nom))
    print("Номинальная плотность: {0:3.3f}, кг/м3".format(rho_nom))
#    2. По номинальной плотности вычисляется температура сжижения.
    t_liq = calc_temp_liq(rho_nom) - 273
    print("Температура сжижения {0:3.3f}, Градусы Цельсия".format(t_liq))
#    3. По номинальной плотности вычисляется давление при температуре сжижения.
    p_liq = calc_p_bb(t_liq + 273, rho_nom)
    print("Давление при температуре сжижения {0:3.4f}, МПа".format(p_liq))
    